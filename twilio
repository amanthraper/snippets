# Pod for Twilio Programmable Video for iOS
pod 'TwilioVideo', '~> 3.0'

import SwiftUI
import AVFoundation
import TwilioVideo
import SocketIO
import Lottie

protocol TwilioViewDelegate: class {
    func handleDismiss()
}

class TwilioVideoViewController : UIViewController {
    
    //MARK: Variable Declaration
    var accessToken = ""
    var room: Room?
    var camera: CameraSource?
    var localVideoTrack: LocalVideoTrack?
    var localAudioTrack: LocalAudioTrack?
    var remoteParticipant: RemoteParticipant?
    var remoteView: VideoView?
    var previewView: VideoView?
    
    var participantCheckTimer: Timer?
    var intWaitTimeParticipant = 40
    
    var btnTwilioClose = UIButton(frame: CGRect(x: 964, y: 20, width: 40, height: 40))
    let chatAnimationView = AnimationView(name: "human-takeover")
    
    weak var delegate: TwilioViewDelegate?
    
    static let sharedInstance = TwilioVideoViewController()
    
    //MARK: View Cycles
    override func viewDidLoad() {
        super.viewDidLoad()
        startPreview()
        autoConnect()
        startParticipantCheckTimer()
    }
    
    
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        getOutOnViewDidDisappear()
    }
    
    //MARK: Custom Methods
    func startPreview() {
        previewView = VideoView(frame: CGRect(x: 20, y: 570, width: 240, height: 180))
        previewView!.layer.cornerRadius = 23
        previewView!.clipsToBounds = true
        btnTwilioClose.setImage(UIImage(named: "close-red") , for: .normal)
        btnTwilioClose.addTarget(self, action: #selector(btnTwilioCloseClicked), for: .touchUpInside)
        self.view.addSubview(self.btnTwilioClose)
        self.view.addSubview(previewView!)
        
        
        let frontCamera = CameraSource.captureDevice(position: .front)
        if (frontCamera != nil) {
            // Preview our local camera track in the local video preview view.
            camera = CameraSource(delegate: self)
            localVideoTrack = LocalVideoTrack.init(source: camera!, enabled: true, name: "Camera")
            
            // Add renderer to video track for local preview
            localVideoTrack!.addRenderer(self.previewView!)
            logMessage(messageText: "Video track created")
            
            camera!.startCapture(device: frontCamera!) { (captureDevice, videoFormat, error) in
                if let error = error {
                    self.logMessage(messageText: "Capture failed with error.\ncode = \((error as NSError).code) error = \(error.localizedDescription)")
                } else {
                    self.previewView!.shouldMirror = (captureDevice.position == .front)
                }
            }
        } else {
            self.logMessage(messageText:"No front or back capture device found!")
        }
    }
    
    func autoConnect() {
        self.prepareLocalMedia()
        
        try? accessToken = fetchToken(url: URLConstants.strTwilioVideoTokenURL)
        print("accessToken >> \(accessToken)")
        
        // Preparing the connect options with the access token that we fetched (or hardcoded).
        let connectOptions = ConnectOptions(token: accessToken) { (builder) in
            
            // Use the local media that we prepared earlier.
            builder.audioTracks = self.localAudioTrack != nil ? [self.localAudioTrack!] : [LocalAudioTrack]()
            builder.videoTracks = self.localVideoTrack != nil ? [self.localVideoTrack!] : [LocalVideoTrack]()
            
            // Use the preferred audio codec
            if let preferredAudioCodec = TwilioSettings.shared.audioCodec {
                builder.preferredAudioCodecs = [preferredAudioCodec]
            }
            
            // Use the preferred video codec
            if let preferredVideoCodec = TwilioSettings.shared.videoCodec {
                builder.preferredVideoCodecs = [preferredVideoCodec]
            }
            
            // Use the preferred encoding parameters
            if let encodingParameters = TwilioSettings.shared.getEncodingParameters() {
                builder.encodingParameters = encodingParameters
            }
            
            // Use the preferred signaling region
            if let signalingRegion = TwilioSettings.shared.signalingRegion {
                builder.region = signalingRegion
            }
            
            // The name of the Room where the Client will attempt to connect to. Please note that if you pass an empty
            // Room `name`, the Client will create one for you. You can get the name or sid from any connected Room.
            builder.roomName = BotConstants.botName
        }
        
        // Connect to the Room using the options we provided.
        room = TwilioVideoSDK.connect(options: connectOptions, delegate: self)
        
        logMessage(messageText: "Attempting to connect to room :  \(String(describing: BotConstants.botName))")
        
        self.showRoomUI(inRoom: true)
        
    }
    
    func prepareLocalMedia() {
        
        // We will share local audio and video when we connect to the Room.
        
        // Create an audio track.
        if (localAudioTrack == nil) {
            localAudioTrack = LocalAudioTrack.init(options: nil, enabled: true, name: "Microphone")
        }
        
        // Create a video track which captures from the camera.
        if (localVideoTrack == nil) {
            self.startPreview()
        }
        
        if (self.localAudioTrack != nil) {
            self.localAudioTrack!.isEnabled = true
        }
    }
    
    func logMessage(messageText: String) {
        //textView.text = messageText
        print("twilio \(messageText)")
        LogServernConsole.log(type: LogServernConsole.typeInfo, category: LogServernConsole.twilioCategory, message: "\(messageText)")
    }
    
    func showRoomUI(inRoom: Bool) {
        //self.btnDisconnect.isHidden = !inRoom
    }
    
    func cleanupRemoteParticipant() {
        if ((self.remoteParticipant) != nil) {
            if ((self.remoteParticipant?.videoTracks.count)! > 0) {
                let remoteVideoTrack = self.remoteParticipant?.remoteVideoTracks[0].remoteTrack
                remoteVideoTrack?.removeRenderer(self.remoteView!)
                self.remoteView?.removeFromSuperview()
                self.remoteView = nil
            }
        }
        self.remoteParticipant = nil
    }
    
    func setupRemoteVideoView() {
        // Creating `VideoView` programmatically
        self.remoteView = VideoView(frame: CGRect(x: 0, y: 0, width: self.view.frame.width, height: self.view.frame.height))
        self.remoteView!.delegate = self
        self.remoteView!.contentMode = .scaleToFill
        
        self.view.addSubview(remoteView!)

        self.view.bringSubviewToFront(remoteView!)
        self.view.bringSubviewToFront(previewView!)
        self.view.bringSubviewToFront(btnTwilioClose)
        
    }
    
    func fetchToken(url : String) throws -> String {
        var token: String = "TWILIO_ACCESS_TOKEN"
        let requestURL: URL = URL(string: url)!
        do {
            let data = try Data(contentsOf: requestURL)
            if let tokenReponse = String.init(data: data, encoding: String.Encoding.utf8) {
                token = tokenReponse
            }
        } catch let error as NSError {
            print ("Invalid token url, error = \(error)")
            throw error
        }
        return token
    }
    
    func getOut() {
        if room != nil{
            room!.disconnect()
            // Disconnect stuff
            
            DispatchQueue.main.async {
                self.previewView!.removeFromSuperview()
                self.btnTwilioClose.removeFromSuperview()
            }
            
            self.delegate?.handleDismiss()
            logMessage(messageText: "Attempting to disconnect from room : \(room!.name)")
            
            if let camera = self.camera {
                camera.stopCapture()
                self.camera = nil
            }
            
            if (localAudioTrack != nil) {
                
                logMessage(messageText: "Failed to create audio track")
            }
        }
    }
    
    func getOutOnViewDidDisappear() {
        if room != nil{
            room!.disconnect()
            // Disconnect stuff
            
            DispatchQueue.main.async {
                self.previewView!.removeFromSuperview()
                self.btnTwilioClose.removeFromSuperview()
            }
            
            logMessage(messageText: "Attempting to disconnect from room : \(room!.name)")
            
            if let camera = self.camera {
                camera.stopCapture()
                self.camera = nil
            }
            
            if (localAudioTrack != nil) {
                
                logMessage(messageText: "Failed to create audio track")
            }
        }
    }
    
    //MARK: Custom Action
    @objc func btnTwilioCloseClicked(sender: UIButton!) {
        getOut()
    }
    
    
    //MARK: Timer Methods
    func startParticipantCheckTimer(){
        if participantCheckTimer == nil{
            participantCheckTimer = Timer.scheduledTimer(withTimeInterval: TimeInterval(intWaitTimeParticipant), repeats: false){_ in
                self.getOut()
                self.stopParticipantCheckTimer()
            }
        }
    }
    
    func stopParticipantCheckTimer(){
        if participantCheckTimer != nil {
            participantCheckTimer?.invalidate()
            participantCheckTimer = nil
        }
    }
}

// MARK:- RoomDelegate
extension TwilioVideoViewController : RoomDelegate {
    func roomDidConnect(room: Room) {
        // At the moment, this example only supports rendering one Participant at a time.
        
        logMessage(messageText: "Connected to room : \(room.name)")
        if (room.remoteParticipants.count > 0) {
            self.remoteParticipant = room.remoteParticipants[0]
            self.remoteParticipant?.delegate = self
            stopParticipantCheckTimer()
        }
    }
    
    func roomDidDisconnect(room: Room, error: Error?) {
        logMessage(messageText: "Disconnected from room : \(room.name), error = \(String(describing: error))")
        
        self.cleanupRemoteParticipant()
        self.room = nil
        
        self.showRoomUI(inRoom: false)
    }
    
    func roomDidFailToConnect(room: Room, error: Error) {
        logMessage(messageText: "Failed to connect to room with error")
        self.room = nil
        
        self.showRoomUI(inRoom: false)
    }
    
    func roomIsReconnecting(room: Room, error: Error) {
        logMessage(messageText: "Reconnecting to room \(room.name), error = \(String(describing: error))")
    }
    
    func roomDidReconnect(room: Room) {
        logMessage(messageText: "Reconnected to room \(room.name)")
    }
    
    func participantDidConnect(room: Room, participant: RemoteParticipant) {
        if (self.remoteParticipant == nil) {
            self.remoteParticipant = participant
            self.remoteParticipant?.delegate = self
        }
        logMessage(messageText: "Participant \(participant.identity) connected with \(participant.remoteAudioTracks.count) audio and \(participant.remoteVideoTracks.count) video tracks")
        
        stopParticipantCheckTimer()
    }
    
    func participantDidDisconnect(room: Room, participant: RemoteParticipant) {
        if (self.remoteParticipant == participant) {
            cleanupRemoteParticipant()
            startParticipantCheckTimer()
            //getOut()
        }
        logMessage(messageText: "Room \(room.name), Participant \(participant.identity) disconnected")
    }
}




// MARK: RemoteParticipantDelegate
extension TwilioVideoViewController : RemoteParticipantDelegate {
    
    func remoteParticipantDidPublishVideoTrack(participant: RemoteParticipant, publication: RemoteVideoTrackPublication) {
        // Remote Participant has offered to share the video Track.
        
        logMessage(messageText: "Participant \(participant.identity) published \(publication.trackName) video track")
    }
    
    func remoteParticipantDidUnpublishVideoTrack(participant: RemoteParticipant, publication: RemoteVideoTrackPublication) {
        // Remote Participant has stopped sharing the video Track.
        
        logMessage(messageText: "Participant \(participant.identity) unpublished \(publication.trackName) video track")
    }
    
    func remoteParticipantDidPublishAudioTrack(participant: RemoteParticipant, publication: RemoteAudioTrackPublication) {
        // Remote Participant has offered to share the audio Track.
        
        logMessage(messageText: "Participant \(participant.identity) published \(publication.trackName) audio track")
    }
    
    func remoteParticipantDidUnpublishAudioTrack(participant: RemoteParticipant, publication: RemoteAudioTrackPublication) {
        // Remote Participant has stopped sharing the audio Track.
        
        logMessage(messageText: "Participant \(participant.identity) unpublished \(publication.trackName) audio track")
    }
    
    func didSubscribeToVideoTrack(videoTrack: RemoteVideoTrack, publication: RemoteVideoTrackPublication, participant: RemoteParticipant) {
        // We are subscribed to the remote Participant's video Track. We will start receiving the
        // remote Participant's video frames now.
        
        logMessage(messageText: "Subscribed to \(publication.trackName) video track for Participant \(participant.identity)")
        
        if (self.remoteParticipant == participant) {
            setupRemoteVideoView()
            videoTrack.addRenderer(self.remoteView!)
        }
    }
    
    func didUnsubscribeFromVideoTrack(videoTrack: RemoteVideoTrack, publication: RemoteVideoTrackPublication, participant: RemoteParticipant) {
        // We are unsubscribed from the remote Participant's video Track. We will no longer receive the
        // remote Participant's video.
        
        logMessage(messageText: "Unsubscribed from \(publication.trackName) video track for Participant \(participant.identity)")
        
        if (self.remoteParticipant == participant) {
            videoTrack.removeRenderer(self.remoteView!)
            self.remoteView?.removeFromSuperview()
            self.remoteView = nil
        }
    }
    
    func didSubscribeToAudioTrack(audioTrack: RemoteAudioTrack, publication: RemoteAudioTrackPublication, participant: RemoteParticipant) {
        // We are subscribed to the remote Participant's audio Track. We will start receiving the
        // remote Participant's audio now.
        
        logMessage(messageText: "Subscribed to \(publication.trackName) audio track for Participant \(participant.identity)")
    }
    
    func didUnsubscribeFromAudioTrack(audioTrack: RemoteAudioTrack, publication: RemoteAudioTrackPublication, participant: RemoteParticipant) {
        // We are unsubscribed from the remote Participant's audio Track. We will no longer receive the
        // remote Participant's audio.
        
        logMessage(messageText: "Unsubscribed from \(publication.trackName) audio track for Participant \(participant.identity)")
    }
    
    func remoteParticipantDidEnableVideoTrack(participant: RemoteParticipant, publication: RemoteVideoTrackPublication) {
        logMessage(messageText: "Participant \(participant.identity) enabled \(publication.trackName) video track")
    }
    
    func remoteParticipantDidDisableVideoTrack(participant: RemoteParticipant, publication: RemoteVideoTrackPublication) {
        logMessage(messageText: "Participant \(participant.identity) disabled \(publication.trackName) video track")
    }
    
    func remoteParticipantDidEnableAudioTrack(participant: RemoteParticipant, publication: RemoteAudioTrackPublication) {
        logMessage(messageText: "Participant \(participant.identity) enabled \(publication.trackName) audio track")
    }
    
    func remoteParticipantDidDisableAudioTrack(participant: RemoteParticipant, publication: RemoteAudioTrackPublication) {
        logMessage(messageText: "Participant \(participant.identity) disabled \(publication.trackName) audio track")
    }
    
    func didFailToSubscribeToAudioTrack(publication: RemoteAudioTrackPublication, error: Error, participant: RemoteParticipant) {
        logMessage(messageText: "FailedToSubscribe \(publication.trackName) audio track, error = \(String(describing: error))")
    }
    
    func didFailToSubscribeToVideoTrack(publication: RemoteVideoTrackPublication, error: Error, participant: RemoteParticipant) {
        logMessage(messageText: "FailedToSubscribe \(publication.trackName) video track, error = \(String(describing: error))")
    }
}

// MARK: VideoViewDelegate
extension TwilioVideoViewController : VideoViewDelegate {
    func videoViewDimensionsDidChange(view: VideoView, dimensions: CMVideoDimensions) {
        self.view.setNeedsLayout()
    }
}

// MARK: CameraSourceDelegate
extension TwilioVideoViewController : CameraSourceDelegate {
    func cameraSourceDidFail(source: CameraSource, error: Error) {
        logMessage(messageText: "Camera source failed with error: \(error.localizedDescription)")
    }
}


